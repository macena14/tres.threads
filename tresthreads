#include <zephyr/kernel.h>
#include <zephyr/device.h>
#include <zephyr/drivers/gpio.h>
#include <zephyr/sys/printk.h>
#include <zephyr/sys/__assert.h>
#include <string.h>

#define MY_STACK_SIZE 1024
#define MY_PRIORITY 0

#define SW0_NODE	DT_ALIAS(sw0)
#define LED2_NODE DT_ALIAS(led2)
#define LED0_NODE DT_ALIAS(led0)

K_MUTEX_DEFINE(mutex1);
K_MUTEX_DEFINE(mutex2);

static const struct gpio_dt_spec button = GPIO_DT_SPEC_GET_OR(SW0_NODE, gpios, {0});//endereco do botao(button)
static struct gpio_callback button_cb_data;
static struct gpio_dt_spec led = GPIO_DT_SPEC_GET_OR(DT_ALIAS(led0), gpios, {0});//led vermelho
static struct gpio_dt_spec led_1 = GPIO_DT_SPEC_GET_OR(DT_ALIAS(led1), gpios, {0});//led verde
static struct gpio_dt_spec led_2 = GPIO_DT_SPEC_GET_OR(DT_ALIAS(led2), gpios, {0});//led azul


int aperta_botao = 1;

void button_pressed(const struct device *dev, struct gpio_callback *cb, uint32_t pins) {
	//printk("pao\n");
	aperta_botao = !aperta_botao;//VARIAVEL GLOBAL

}

void F1(void) {
	gpio_pin_configure_dt(&led_1, GPIO_OUTPUT);//configura o led verde
    while(1){
        if((k_mutex_lock(&mutex1, K_FOREVER)) == 0) {//tenta pegar o mutex1 para sempre. se conseguir, executa..
			//printk("bloqueio\n");
			gpio_pin_set_dt(&led_1,1); // troca estado do led..
			k_mutex_lock(&mutex2, K_FOREVER);
            k_msleep(200);//espera 250 ms..
			gpio_pin_set_dt(&led_1,0);
            k_mutex_unlock(&mutex1);//solta mutex1
			k_mutex_unlock(&mutex2);
			//printk("libera\n");
            k_msleep(200);//espera 250 ms..
        }
        }
}

void F2(void) {
 	
	gpio_pin_configure_dt(&led, GPIO_OUTPUT);//led vermelho: coloca na variavel ret o valor do GPIO_output de led
	gpio_pin_configure_dt(&button, GPIO_INPUT | GPIO_INT_EDGE_BOTH);//		
	gpio_pin_interrupt_configure_dt(&button, GPIO_INT_EDGE_BOTH);//

	gpio_init_callback(&button_cb_data, button_pressed, BIT(button.pin));//associa a funcao button_callback a um botao (BIT)
	gpio_add_callback(button.port, &button_cb_data);//registra o callbck no dispositivo.button_cb_data sera chamado
	
	if (led.port) {
		while (1) {

			if (aperta_botao == 1) { // Se a leitura do botão foi bem-sucedida
				if ((k_mutex_lock(&mutex1, K_FOREVER)) == 0 && (k_mutex_lock(&mutex2, K_FOREVER)) == 0) { // Tenta adquirir o mutex até conseguir
					gpio_pin_set_dt(&led, 0); // zera o LED verde
					k_msleep(20);//espera 250 ms..
					gpio_pin_set_dt(&led, 1); // seta o LED verde
					k_msleep(50);//espera 250 ms..
					gpio_pin_set_dt(&led, 0); // zera o LED verde
					//printk("bloqueio mutex2 %d", k_mutex_lock(&mutex2, K_FOREVER));
					k_mutex_unlock(&mutex2); // Libera o mutex
					k_mutex_unlock(&mutex1); // Libera o mutex
					
				}
			} 
			// else{ if (aperta_botao == 0) {
			// 	k_mutex_unlock(&mutex2); // Libera o mutex
			// 	gpio_pin_set_dt(&led, 0);// poe um valor no i/o indicado por &xx, VERMELHO
			// 	//printk("libera mutex2\n");
			// 	k_mutex_unlock(&mutex1); // Libera o mutex
			// }
			k_msleep(200); // Aguarda 500ms antes da próxima iteração
		}
	}	
}

void F3(void) {
	gpio_pin_configure_dt(&led_2, GPIO_OUTPUT);//configura o led verde
    while(1){
        if((k_mutex_lock(&mutex1, K_FOREVER)) == 0) {//tenta pegar o mutex1 para sempre. se conseguir, executa..
			//printk("bloqueio\n");
			gpio_pin_set_dt(&led_2,1); // troca estado do led..
            k_msleep(1500);//espera 250 ms..
			gpio_pin_set_dt(&led_2,0);
            k_mutex_unlock(&mutex1);//solta mutex1
			//printk("libera\n");
            k_msleep(1500);//espera 250 ms..
        }
        }
}


K_THREAD_DEFINE(F1_id, MY_STACK_SIZE, F1, NULL, NULL, NULL, MY_PRIORITY, 0, 0);
K_THREAD_DEFINE(F2_id, MY_STACK_SIZE, F2, NULL, NULL, NULL, MY_PRIORITY, 0, 0);
K_THREAD_DEFINE(F3_id, MY_STACK_SIZE, F3, NULL, NULL, NULL, MY_PRIORITY, 0, 0);
